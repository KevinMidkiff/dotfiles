## ZSH Configuration
## Kevin Midkiff

ZSH_FILE=$(readlink $HOME/.zshrc)
ZSH_DIR=$(dirname ${ZSH_FILE})
DOTFILES="${ZSH_DIR}/../../"

if [ ! -d "${DOTFILES}" ] ; then
    echo "!!! ERROR: Failed to find .dotfiles directory at '${DOTFILES}'"
else
    source ${DOTFILES}/scripts/utils.sh
fi

zstyle :compinstall filename '$HOME/.zshrc'
autoload -Uz compinit colors vcs_info
colors
compinit

# Add local zshrc file, allows for specifying config values specific to the
# current environment, as well as specifying configuration variables that will
# affect the overall ZSH configuration.
if [[ -f ~/.zshrc.local ]] ; then
    source ~/.zshrc.local
fi

# Set default tmux color if not set in local
if [ -z "${TMUX_COLOUR}" ] ; then
    export TMUX_COLOUR=colour171
fi

REPORTTIME=3

# Keep large history of commands
HISTFILE=~/.zshhistfile
HISTSIZE=5000
SAVEHIST=5000

# Add commands to history as they are entered, do not wait for shell exit
setopt INC_APPEND_HISTORY

# Remember command execution start time and duration
setopt EXTENDED_HISTORY

# Do not duplicate commands in the history
setopt HIST_IGNORE_ALL_DUPS

# Add auto change directories
setopt AUTO_CD

# PS1 Configuration / Styling
# Variable prompt if SSH'ed into the system
use_default_style=0
if [ -f "${HOME}/.zshrc.style" ] ; then
    source "${HOME}/.zshrc.style"

    if [ -z "$primary" ] ; then
        echo "ERROR: style missing 'primary' value"
        use_default_style=1
    fi
    if [ -z "$accent" ] ; then
        echo "ERROR: style missing 'accent' value"
        use_default_style=1
    fi
    if [ -z "$accent2" ] ; then
        echo "ERROR: style missing 'accent2' value"
        use_default_style=1
    fi
    if [ -z "$accent3" ] ; then
        echo "ERROR: style missing 'accent3' value"
        use_default_style=1
    fi
else
    use_default_style=1
fi

if [ $use_default_style -eq 1 ] ; then
    # Default style
    primary="146"
    accent="9"
    accent2="120"
    accent3="122"
fi

ssh_msg=""
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] ; then
    # Flip-flow primary and accent for ssh'ing into a system
    primary="${accent}"
    accent="${primary}"
fi

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] || [ -f "${HOME}/.zshrc.show-host" ]; then
    ssh_msg="%F{$accent3}[$(hostname)]%f "
fi

# Check for user data function to attach to the prompt
has_user_data=0
if [ -f "${HOME}/.zshrc.user-data" ] ; then
    source "${HOME}/.zshrc.user-data"
    has_user_data=1
    if typeset -f prompt_user_data > /dev/null ; then
    else
        echo "ERROR: ~/.zshrc.user-data missing 'prompt_user_data' function"
        has_user_data=0
    fi
fi

zstyle ':completion:*' menu select completer _complete _correct _approximate
zstyle ':vcs_info:*' stagedstr ' %F{green}+%f'
zstyle ':vcs_info:*' unstagedstr ' %F{yellow}~%f'
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git*' formats " (%F{$accent}%b%f%u%c)"

# Determine glyph sequence
if [ -f "${HOME}/.zshrc.ascii-glyph" ] ; then
   INSERT_GLYPH="<<I>>"
   NORMAL_GLYPH="<<N>>"
else
   INSERT_GLYPH="▲"
   NORMAL_GLYPH="▼"
fi

which conda > /dev/null
if [ $? -ne 0 ] ; then
    conda_installed=0
else
    conda_installed=1
fi

if [ ${conda_installed} -eq 1 ] ; then
    # Initialize conda
    if [ -z "${CONDA_DIR}" ] ; then
        # TODO(kmidkiff): Assuming just miniconda3 for now, may need to expand this
        # in the future if I switch to using anaconda3 and/or miniconda3.
        CONDA_DIR="${HOME}/miniconda3"
    elif [ ! -d "${CONDA_DIR}" ] ; then
        echo "ERROR: Provided CONDA_DIR value ('${CONDA_DIR}') does not exist"
    fi

    # Checking again here and not emitting an error because the error should be
    # printed above. It is not a strict requirement to have conda installed, so if
    # it is not desired to be installed do not be annoying and print an error.
    if [ -d "${CONDA_DIR}" ] ; then
        CONDA_BIN="${CONDA_DIR}/bin/conda"
        if [ ! -f "${CONDA_BIN}" ] ; then
            echo "ERROR: Conda directory ('${CONDA_DIR}') missing binary '${CONDA_BIN}"
        else
            # NOTE: Below code borrowed from conda init
            __conda_setup="$(${CONDA_BIN} 'shell.zsh' 'hook' 2> /dev/null)"
            if [ $? -eq 0 ]; then
                eval "$__conda_setup"
            else
                # if [ -f "/home/kmidkiff/miniconda3/etc/profile.d/conda.sh" ]; then
                #     . "/home/kmidkiff/miniconda3/etc/profile.d/conda.sh"
                # else
                #     export PATH="/home/kmidkiff/miniconda3/bin:$PATH"
                # fi
                echo "ERROR: __conda_setup failed"
            fi
            unset __conda_setup
        fi
    fi
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
conda_cmd="${HOME}/miniconda3/bin/conda"
__conda_setup="$(${conda_cmd} 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then
        . "${HOME}/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="${HOME}/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

_setup_ps1() {
    vcs_info
    GLYPH="%F{$primary}${INSERT_GLYPH}%f"
    ROOT=""
    VCS=""
    # VENV=""
    CNDENV=""
    [ "x$KEYMAP" = "xvicmd" ] && GLYPH="${NORMAL_GLYPH}"
    [[ $EUID -eq 0 ]] && ROOT="%F{$accent}[root]%f "
    if [ ! -z "${CONDA_DEFAULT_ENV}" ] && [ "${CONDA_DEFAULT_ENV}" != "base" ] ; then
        CNDENV="%F{$accent2}[conda:%f %F{$accent}${CONDA_DEFAULT_ENV}%f%F{$accent2}]%f "
    fi
    # See virtualenv comment above
    # [ -n "$VIRTUAL_ENV" ] && VENV="%F{$accent2}[`basename $VIRTUAL_ENV`]%f "
    if [ $has_user_data -eq 1 ] ; then
        USRDATA="%F{$accent2}[`prompt_user_data`]%f "
    else
        USRDATA=""
    fi
    # See virtualenv comment above
    # PS1=" $USRDATA$VENV$ROOT%(?.%F{$accent}.%F{$primary})$GLYPH%f $ssh_msg%F{$primary}%(4~|%B...%b/%3~|%~)%f$vcs_info_msg_0_ "
    PS1=" $USRDATA$CNDENV$ROOT%(?.%F{$accent}.%F{$primary})$GLYPH%f $ssh_msg%F{$primary}%(4~|%B...%b/%3~|%~)%f$vcs_info_msg_0_ "
}
_setup_ps1

# Key bindings & Vim mode
zle-keymap-select () {
 _setup_ps1
  zle reset-prompt
}
zle -N zle-keymap-select
zle-line-init () {
  zle -K viins
}
zle -N zle-line-init
bindkey -v
bindkey "^R" history-incremental-pattern-search-backward

# Global editor
export EDITOR="vim"

# Aliases
alias zshconfig="$EDITOR ~/.zshrc"
alias zshsource="source ~/.zshrc"
alias dotfiles='cd ${HOME}/.dotfiles/'
alias ll="ls -lH"
alias l="ls -la"

if [ ! -z "$(which batcat)" ] ; then
    alias cat="bat"
    alias jat="bat -l json"
fi

arch="$(uname 2> /dev/null)"
if [ "$arch" = "Linux" ] ; then
    ls --color=auto &> /dev/null
    if [ $? -eq 0 ] ; then
        alias ls="ls --color=auto"
        alias ll="ls --color=auto -lH"
        alias l="ls --color=auto -la"
    fi
elif [ "$arch" = "Darwin" ] ; then
    alias ls="ls -G"
    alias ll="ls -G -lH"
    alias l="ls -G -la"
fi

# Tmux specfic configurations
export TERM=screen-256color
# [ -n "$TMUX" ] && export TERM=screen-256color

# Rust! :D
if [[ -f ~/.cargo/env ]] ; then
    source ~/.cargo/env
fi

# Go :(
export GOPATH=~/go/

# Add stuff to PATH
export PATH=$PATH:/usr/local/go/bin

# Add Go pakcage binaries if they exist
if [[ -d $GOPATH ]] ; then
    export PATH=$PATH:$GOPATH/bin/
fi

# Add NVM setup
export NVM_DIR="$HOME/.nvm"
if [ -d "${NVM_DIR}" ] ; then
    # NVM is insanely slow to load... Lazy load it when the first NVM command is
    # executed
    function lazy_load_nvm() {
        echo -e "\033[1;33m>>> lazy loading nvm...\033[0m"
        unalias nvm
        if is_macos ; then
            [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
            [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
        elif is_linux ; then
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
        else
            log_error "Setting up nvm on unknown system: $(uname -s)"
        fi
        nvm ${@[*]}
    }

    alias nvm="lazy_load_nvm"
fi

######
# TODO(kmidkiff): Commenting this out for now, because it has issues and I no
# longer use virtualenv. Keeping for potentially reenabling in the future if
# necessary
#
# virtualenv and virtualenvwrapper (only if it is installed)
# export WORKON_HOME=$HOME/.virtualenvs
# export VIRTUALENVWRAPPER_PYTHON=`which python3`
# if [[ -f /usr/local/bin/virtualenvwrapper.sh ]] ; then
#     source /usr/local/bin/virtualenvwrapper.sh
# fi
######

# Proxies
if [[ -f ~/.proxies.sh ]] ; then
    source ~/.proxies.sh
fi

# Load SSH agent
if [ -z "${idents[*]}" ] ; then
    idents=( )

    if [ -f "$HOME/.ssh/id_rsa" ] ; then
        idents+=( "id_rsa" )
    fi

    if [ -f "$HOME/.ssh/id_ed25519" ] ; then
        idents+=( "id_ed25519" )
    fi
fi

if [ ${#idents[@]} -gt 0 ] ; then
    zstyle :omz:plugins:ssh-agent identities $idents
    source $ZSH_DIR/scripts/ssh-agent.plugin.zsh
fi

highlight="$ZSH_DIR/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh"
if [ -f "$highlight" ] ; then
    source $highlight
fi

autosuggest="$ZSH_DIR/zsh-autosuggestions/zsh-autosuggestions.zsh"
if [ -f "$autosuggest" ] ; then
    source $autosuggest
fi


uname_out="$(uname -s)"
if [[ "${uname_out}" =~ "Darwin"* ]] ; then
    export PATH=${PATH}:/opt/homebrew/bin/
fi

# UV setup if it's installed
if [ -f "${HOME}/.local/bin/env" ] ; then
    source "$HOME/.local/bin/env"
fi
